import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from config import TELEGRAM_BOT_TOKEN, TEMP_DIR
from rag import get_answer, update_knowledge_base, check_services_health

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
last_answered = {}

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è ---
async def keep_typing(chat_id: int, stop_event: asyncio.Event):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ 'typing' –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    typing_count = 0
    logger.info(f"üé¨ –ó–∞–ø—É—Å–∫–∞—é —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    
    while not stop_event.is_set():
        try:
            await bot.send_chat_action(chat_id=chat_id, action="typing")
            typing_count += 1
            logger.info(f"‚å®Ô∏è –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω #{typing_count} –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        
        # –ñ–¥–µ–º 4 —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        try:
            await asyncio.wait_for(stop_event.wait(), timeout=4.0)
            break  # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ - –≤—ã—Ö–æ–¥–∏–º
        except asyncio.TimeoutError:
            continue  # –¢–∞–π–º–∞—É—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
    
    logger.info(f"üõë –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id} (–≤—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {typing_count})")

# --- –ü–æ–ª—É—á–∏—Ç—å ID –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞ ---
async def get_chat_admin_ids(chat_id: int) -> list[int]:
    try:
        admins = await bot.get_chat_administrators(chat_id)
        return [admin.user.id for admin in admins if not admin.user.is_bot]
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}")
        return []

# --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
def get_message_link(chat_id: int, message_id: int) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
    """
    try:
        # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø chat_id –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç -100xxxxxxxxx
        # –ù—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å "-100" –¥–ª—è —Å—Å—ã–ª–∫–∏
        if str(chat_id).startswith("-100"):
            # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ - —É–±–∏—Ä–∞–µ–º "-100"
            clean_id = str(chat_id)[4:]  # –£–±–∏—Ä–∞–µ–º "-100"
            return f"https://t.me/c/{clean_id}/{message_id}"
        else:
            # –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ —É–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ –º–∏–Ω—É—Å
            clean_id = str(abs(chat_id))
            return f"https://t.me/c/{clean_id}/{message_id}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        return f"–ß–∞—Ç ID: {chat_id}, –°–æ–æ–±—â–µ–Ω–∏–µ: {message_id}"

# --- –ö–Ω–æ–ø–∫–∞ "–ù–µ –ø–æ–º–æ–≥–ª–æ" ---
def get_didnt_help_button():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –ù–µ –ø–æ–º–æ–≥–ª–æ", callback_data="need_help")]
        ]
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ #–≤–æ–ø—Ä–æ—Å ---
@dp.message(F.chat.type.in_(["group", "supergroup"]))
async def handle_group_question(message: types.Message):
    if not message.text or "#–≤–æ–ø—Ä–æ—Å" not in message.text.lower():
        return

    key = f"{message.chat.id}:{message.from_user.id}"
    if last_answered.get(key) == message.message_id:
        return
    last_answered[key] = message.message_id

    question = message.text.replace("#–≤–æ–ø—Ä–æ—Å", "", 1).strip() or "–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å"

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è —Å—Ä–∞–∑—É
    logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {message.chat.id}")
    try:
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as test_error:
        logger.error(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è –ù–ï –†–ê–ë–û–¢–ê–ï–¢: {test_error}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
    stop_typing = asyncio.Event()
    typing_task = None
    
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–∞: '{question[:100]}...'")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
        typing_task = asyncio.create_task(keep_typing(message.chat.id, stop_typing))
        logger.info("üé¨ –ó–∞–¥–∞—á–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è —É—Å–ø–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è
        await asyncio.sleep(0.1)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        answer = get_answer(question)
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç RAG, –¥–ª–∏–Ω–∞: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as main_error:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {main_error}")
        raise
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
        if typing_task:
            logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è...")
            stop_typing.set()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è
            try:
                await asyncio.wait_for(typing_task, timeout=1.0)
                logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            except asyncio.TimeoutError:
                logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è")
                typing_task.cancel()
                try:
                    await typing_task
                except asyncio.CancelledError:
                    logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è: {e}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        no_info_phrases = [
            "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"
        ]
        
        if any(phrase in answer.lower() for phrase in no_info_phrases):
            raise ValueError("No context")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        final_answer = (
            f"üìò *–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞*\n\n"
            f"{answer}\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. "
            f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ—Å—ë—Ç —Å—Ç—É–¥–µ–Ω—Ç._"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É...")
        try:
            await message.reply(
                final_answer,
                reply_markup=get_didnt_help_button(),
                parse_mode="Markdown",
                reply_to_message_id=message.message_id
            )
            logger.info("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as send_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {send_error}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏, –Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π
            try:
                await message.reply(
                    answer,
                    reply_markup=get_didnt_help_button(),
                    reply_to_message_id=message.message_id
                )
                logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏")
            except Exception as fallback_error:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {fallback_error}")
                raise  # –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ

    except Exception as e:
        logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ '{question}' –≤ —á–∞—Ç–µ {message.chat.id}: {e}")

        chat_title = message.chat.title or f"–ß–∞—Ç ID: {message.chat.id}"
        user_name = message.from_user.full_name
        question_preview = (question[:150] + "...") if len(question) > 150 else question

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_link = get_message_link(message.chat.id, message.message_id)
        
        alert_text = (
            f"üö® *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å*\n\n"
            f"üîπ –ì—Ä—É–ø–ø–∞: {chat_title}\n"
            f"üîπ –°—Ç—É–¥–µ–Ω—Ç: {user_name}\n"
            f"üîπ –í–æ–ø—Ä–æ—Å: {question_preview}\n"
            f"üîπ [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é]({message_link})"
        )

        chat_admin_ids = await get_chat_admin_ids(message.chat.id)
        notified_count = 0
        for admin_id in chat_admin_ids:
            try:
                await bot.send_message(admin_id, alert_text, parse_mode="Markdown")
                notified_count += 1
            except Exception as err:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {admin_id}: {err}")

        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–æ {notified_count} –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã {chat_title}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
        await message.reply(
            "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ö—É—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω ‚Äî —Å–∫–æ—Ä–æ –ø—Ä–∏–±—É–¥–µ—Ç –Ω–∞ –ø–æ–º–æ—â—å.",
            reply_to_message_id=message.message_id
        )

# --- –ó–∞–≥—Ä—É–∑–∫–∞ PDF –≤ –õ–° ---
@dp.message(F.document)
async def handle_pdf_upload(message: types.Message):
    logger.info("üì• handle_pdf_upload –≤—ã–∑–≤–∞–Ω")
    logger.info(f"üì© PDF –ø–æ–ª—É—á–µ–Ω: {message.document.file_name}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ PDF?
    if not message.document.file_name.lower().endswith(".pdf"):
        await message.reply("‚ùå –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã.")
        return
    logger.info("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if message.document.file_size > 10 * 1024 * 1024:
        await message.reply("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.")
        return
    logger.info("‚úÖ –†–∞–∑–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    upload_allowed_ids = os.getenv("ADMIN_UPLOAD_IDS", "").split(",")
    upload_allowed_ids = [int(x.strip()) for x in upload_allowed_ids if x.strip().isdigit()]
    if upload_allowed_ids and message.from_user.id not in upload_allowed_ids:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    logger.info("‚úÖ –ü—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")

    # –í–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–Ω–∏—è" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    processing_message = await message.reply("‚è≥ –ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
    file_name = message.document.file_name
    file_info = await bot.get_file(message.document.file_id)
    pdf_path = os.path.join(TEMP_DIR, file_name)
    logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_name}")

    try:
        await bot.download_file(file_info.file_path, pdf_path)
        logger.info("‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω")

        update_knowledge_base(pdf_path, file_name)
        logger.info("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_message.delete()
        await message.reply("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}", exc_info=True)
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        try:
            await processing_message.delete()
        except:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")
    finally:
        if os.path.exists(pdf_path):
            os.remove(pdf_path)
            logger.info("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω")

# --- –ö–Ω–æ–ø–∫–∞ "–ù–µ –ø–æ–º–æ–≥–ª–æ" ---
@dp.callback_query(F.data == "need_help")
async def handle_need_help(callback: types.CallbackQuery):
    try:
        chat_admin_ids = await get_chat_admin_ids(callback.message.chat.id)
        chat_title = callback.message.chat.title or f"–ß–∞—Ç ID: {callback.message.chat.id}"
        user_name = callback.from_user.full_name
        question_text = (
            callback.message.reply_to_message.text[:200] + "..."
            if callback.message.reply_to_message and callback.message.reply_to_message.text
            else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        original_message_id = callback.message.reply_to_message.message_id if callback.message.reply_to_message else callback.message.message_id
        message_link = get_message_link(callback.message.chat.id, original_message_id)
        
        alert_text = (
            f"üö® *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å!*\n\n"
            f"üîπ –ì—Ä—É–ø–ø–∞: {chat_title}\n"
            f"üîπ –°—Ç—É–¥–µ–Ω—Ç: {user_name}\n"
            f"üîπ –í–æ–ø—Ä–æ—Å: {question_text}\n"
            f"üîπ [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é]({message_link})"
        )

        notified_count = 0
        for admin_id in chat_admin_ids:
            try:
                await bot.send_message(admin_id, alert_text, parse_mode="Markdown")
                notified_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ {admin_id}: {e}")

        logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ù–µ –ø–æ–º–æ–≥–ª–æ': —É–≤–µ–¥–æ–º–ª–µ–Ω–æ {notified_count} –∞–¥–º–∏–Ω–æ–≤")

        await callback.message.edit_text(
            callback.message.html_text + "\n\n‚ö†Ô∏è –ö—É—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω ‚Äî –ø–æ–º–æ—â—å –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞.",
            parse_mode="HTML"
        )
        await callback.answer("–ö—É—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ 'need_help': {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.", show_alert=True)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    if not check_services_health():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return
    
    logger.info("üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Qwen —á–µ—Ä–µ–∑ OpenRouter API.")
    await dp.start_polling(bot)

@dp.message()
async def catch_all(message: types.Message):
    logger.info(f"üì© –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.content_type}")
    if message.document:
        logger.info(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}, MIME: {message.document.mime_type}")
    if message.photo:
        logger.info(f"üñºÔ∏è –≠—Ç–æ —Ñ–æ—Ç–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(message.photo)}")
    if message.text:
        logger.info(f"üí¨ –¢–µ–∫—Å—Ç: {message.text}")

if __name__ == "__main__":
    asyncio.run(main())
