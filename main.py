import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from config import TELEGRAM_BOT_TOKEN, TEMP_DIR
from rag import get_answer, update_knowledge_base

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
last_answered = {}

# --- –ü–æ–ª—É—á–∏—Ç—å ID –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞ ---
async def get_chat_admin_ids(chat_id: int) -> list[int]:
    try:
        admins = await bot.get_chat_administrators(chat_id)
        return [admin.user.id for admin in admins if not admin.user.is_bot]
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}")
        return []

# --- –ö–Ω–æ–ø–∫–∞ "–ù–µ –ø–æ–º–æ–≥–ª–æ" ---
def get_didnt_help_button():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –ù–µ –ø–æ–º–æ–≥–ª–æ", callback_data="need_help")]
        ]
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ #–≤–æ–ø—Ä–æ—Å ---
@dp.message(F.chat.type.in_(["group", "supergroup"]))
async def handle_group_question(message: types.Message):
    if not message.text or "#–≤–æ–ø—Ä–æ—Å" not in message.text.lower():
        return

    key = f"{message.chat.id}:{message.from_user.id}"
    if last_answered.get(key) == message.message_id:
        return
    last_answered[key] = message.message_id

    question = message.text.replace("#–≤–æ–ø—Ä–æ—Å", "", 1).strip() or "–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å"

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        answer = get_answer(question)

        # –ï—Å–ª–∏ –±–æ—Ç "–∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç—Å—è" ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç
        if "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å" in answer.lower():
            raise ValueError("No context")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        final_answer = (
            f"üìò *–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞*\n\n"
            f"{answer}\n\n"
            f"_–≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. "
            f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ—Å—ë—Ç —Å—Ç—É–¥–µ–Ω—Ç._"
        )
        await message.reply(
            final_answer,
            reply_markup=get_didnt_help_button(),
            parse_mode="Markdown",
            reply_to_message_id=message.message_id
        )

    except Exception as e:
        logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ '{question}' –≤ —á–∞—Ç–µ {message.chat.id}: {e}")

        chat_title = message.chat.title or f"–ß–∞—Ç ID: {message.chat.id}"
        user_name = message.from_user.full_name
        question_preview = (question[:150] + "...") if len(question) > 150 else question

        alert_text = (
            f"üö® *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å*\n\n"
            f"üîπ –ì—Ä—É–ø–ø–∞: {chat_title}\n"
            f"üîπ –°—Ç—É–¥–µ–Ω—Ç: {user_name}\n"
            f"üîπ –í–æ–ø—Ä–æ—Å: {question_preview}\n"
            f"üîπ [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é](https://t.me/c/{message.chat.id}/{message.message_id})"
        )

        chat_admin_ids = await get_chat_admin_ids(message.chat.id)
        notified_count = 0
        for admin_id in chat_admin_ids:
            try:
                await bot.send_message(admin_id, alert_text, parse_mode="Markdown")
                notified_count += 1
            except Exception as err:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {admin_id}: {err}")

        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–æ {notified_count} –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã {chat_title}")

        await message.reply(
            "–Ø –∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. "
            "–ö—É—Ä–∞—Ç–æ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω ‚Äî –ø–æ–º–æ—â—å –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞.",
            reply_to_message_id=message.message_id
        )

# --- –ó–∞–≥—Ä—É–∑–∫–∞ PDF –≤ –õ–° ---
@dp.message(F.document)
async def handle_pdf_upload(message: types.Message):
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    logger.info(
        f"üì© –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}, "
        f"MIME: {message.document.mime_type}, "
        f"–†–∞–∑–º–µ—Ä: {message.document.file_size} –±–∞–π—Ç"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ PDF?
    if not message.document.file_name.lower().endswith(".pdf"):
        await message.reply("‚ùå –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–¥–æ 10 –ú–ë)
    if message.document.file_size > 10 * 1024 * 1024:
        await message.reply("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º ‚Äî 10 –ú–ë.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    upload_allowed_ids = os.getenv("ADMIN_UPLOAD_IDS", "").split(",")
    upload_allowed_ids = [int(x.strip()) for x in upload_allowed_ids if x.strip().isdigit()]

    if upload_allowed_ids and message.from_user.id not in upload_allowed_ids:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É PDF.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
    file_name = message.document.file_name
    file_info = await bot.get_file(message.document.file_id)
    pdf_path = os.path.join(TEMP_DIR, file_name)

    try:
        await bot.download_file(file_info.file_path, pdf_path)
        update_knowledge_base(pdf_path, file_name)
        await message.reply(
            f"‚úÖ –§–∞–π–ª *{file_name}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n"
            f"_–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∞–∫—Ç—É–∞–ª—å–Ω–∞._",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:500]}")
    finally:
        if os.path.exists(pdf_path):
            os.remove(pdf_path)

# --- –ö–Ω–æ–ø–∫–∞ "–ù–µ –ø–æ–º–æ–≥–ª–æ" ---
@dp.callback_query(F.data == "need_help")
async def handle_need_help(callback: types.CallbackQuery):
    try:
        chat_admin_ids = await get_chat_admin_ids(callback.message.chat.id)
        chat_title = callback.message.chat.title or f"–ß–∞—Ç ID: {callback.message.chat.id}"
        user_name = callback.from_user.full_name
        question_text = (
            callback.message.reply_to_message.text[:200] + "..."
            if callback.message.reply_to_message and callback.message.reply_to_message.text
            else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        )

        alert_text = (
            f"üö® *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å!*\n\n"
            f"üîπ –ì—Ä—É–ø–ø–∞: {chat_title}\n"
            f"üîπ –°—Ç—É–¥–µ–Ω—Ç: {user_name}\n"
            f"üîπ –í–æ–ø—Ä–æ—Å: {question_text}\n"
            f"üîπ [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é](https://t.me/c/{callback.message.chat.id}/{callback.message.message_id})"
        )

        notified_count = 0
        for admin_id in chat_admin_ids:
            try:
                await bot.send_message(admin_id, alert_text, parse_mode="Markdown")
                notified_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ {admin_id}: {e}")

        logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ù–µ –ø–æ–º–æ–≥–ª–æ': —É–≤–µ–¥–æ–º–ª–µ–Ω–æ {notified_count} –∞–¥–º–∏–Ω–æ–≤")

        await callback.message.edit_text(
            callback.message.html_text + "\n\n‚ö†Ô∏è –ö—É—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω ‚Äî –ø–æ–º–æ—â—å –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞.",
            parse_mode="HTML"
        )
        await callback.answer("–ö—É—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ 'need_help': {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.", show_alert=True)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Qwen —á–µ—Ä–µ–∑ dashscope.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
