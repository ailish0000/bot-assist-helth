from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import Qdrant
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_core.documents import Document
from PyPDF2 import PdfReader
import hashlib
from openai import OpenAI
import logging
import os
import time
from qdrant_client import QdrantClient
from qdrant_client.http import models
from data_cleaner import DataCleaner

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é —Å ML –º–æ–¥–µ–ª—è–º–∏
    from nlp_processor import NLPProcessor
    logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è NLP –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")
except ImportError as e:
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–µ–≥—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    logger.warning(f"‚ö†Ô∏è –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è NLP –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –æ–±–ª–µ–≥—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é NLP –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    from nlp_processor_lite import NLPProcessor

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Qdrant ---
QDRANT_URL = os.getenv("QDRANT_URL")
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
QDRANT_COLLECTION_NAME = os.getenv("QDRANT_COLLECTION_NAME", "nutri-bot")

if not QDRANT_URL or not QDRANT_API_KEY:
    logger.error("‚ùó –ù–µ –∑–∞–¥–∞–Ω—ã QDRANT_URL –∏–ª–∏ QDRANT_API_KEY")
    raise ValueError("Qdrant: URL –∏ API-–∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenRouter (Qwen) ---
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
if not OPENROUTER_API_KEY:
    logger.error("‚ùó –ù–µ –∑–∞–¥–∞–Ω OPENROUTER_API_KEY")
    raise ValueError("OpenRouter: API-–∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è OpenRouter
from openai import OpenAI
openrouter_client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

# --- –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ ---
embeddings = HuggingFaceEmbeddings(model_name=os.getenv("EMBEDDING_MODEL", "sentence-transformers/all-MiniLM-L6-v2"))

# --- NLP –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä ---
nlp_processor = NLPProcessor()
logger.info("üß† NLP –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# --- –û—á–∏—Å—Ç–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö ---
data_cleaner = DataCleaner()
logger.info("üßπ –ú–æ–¥—É–ª—å –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# --- –ö–ª–∏–µ–Ω—Ç Qdrant ---
client = QdrantClient(
    url=QDRANT_URL,
    api_key=QDRANT_API_KEY,
    timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è Railway
)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ---
try:
    client.get_collection(QDRANT_COLLECTION_NAME)
    logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{QDRANT_COLLECTION_NAME}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
except Exception as e:
    logger.info(f"üõ†Ô∏è –°–æ–∑–¥–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é '{QDRANT_COLLECTION_NAME}'...")
    client.create_collection(
        collection_name=QDRANT_COLLECTION_NAME,
        vectors_config=models.VectorParams(
            size=384,
            distance=models.Distance.COSINE
        )
    )
    logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{QDRANT_COLLECTION_NAME}' —Å–æ–∑–¥–∞–Ω–∞")

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ –ø–æ–ª—é "source" ---
try:
    info = client.get_collection(QDRANT_COLLECTION_NAME)
    payload_schema = info.payload_schema
    if "source" not in payload_schema:
        logger.info("üõ†Ô∏è –°–æ–∑–¥–∞—é –∏–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—é 'source'...")
        client.create_payload_index(
            collection_name=QDRANT_COLLECTION_NAME,
            field_name="source",
            field_schema=models.PayloadSchemaType.KEYWORD
        )
        logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—é 'source' —Å–æ–∑–¥–∞–Ω")
    else:
        logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—é 'source' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")

# --- –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ---
vectorstore = Qdrant(
    client=client,
    collection_name=QDRANT_COLLECTION_NAME,
    embeddings=embeddings
)


# --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ ---
def check_services_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Qdrant –∏ OpenRouter –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant
    try:
        logger.info("üîó –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant...")
        collection_info = client.get_collection(QDRANT_COLLECTION_NAME)
        logger.info(f"‚úÖ Qdrant OK - –ö–æ–ª–ª–µ–∫—Ü–∏—è: {QDRANT_COLLECTION_NAME}, –í–µ–∫—Ç–æ—Ä–æ–≤: {collection_info.points_count}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {e}")
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ QDRANT_URL –∏ QDRANT_API_KEY")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenRouter
    try:
        logger.info("ü§ñ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter...")
        test_response = openrouter_client.chat.completions.create(
            model="qwen/qwen-2.5-coder-32b-instruct",
            messages=[{"role": "user", "content": "Test"}],
            max_tokens=5,
            timeout=10
        )
        logger.info("‚úÖ OpenRouter OK - API –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter: {e}")
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OPENROUTER_API_KEY")
        return False
    
    logger.info("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã!")
    return True


# --- –§—É–Ω–∫—Ü–∏—è: –≤—ã–∑–æ–≤ Qwen —á–µ—Ä–µ–∑ OpenRouter ---
def call_qwen(prompt: str) -> str:
    logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Qwen —á–µ—Ä–µ–∑ OpenRouter...")
    try:
        chat_completion = openrouter_client.chat.completions.create(
            model="qwen/qwen-2.5-coder-32b-instruct",
            messages=[
                {
                    "role": "system",
                    "content": """–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ö—Å–µ–Ω–∏—è –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π Telegram-–≥—Ä—É–ø–ø–µ –ø–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –¢—ã –≤—Å–µ–≥–¥–∞ —Å —Ä–∞–¥–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ê–õ–ì–û–†–ò–¢–ú –û–¢–í–ï–¢–ê:
1. –ù–∞–π–¥–∏ –õ–Æ–ë–£–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º
2. –ï—Å–ª–∏ –Ω–∞—à–µ–ª —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
3. –ù–ï –æ—Ç–∫–∞–∑—ã–≤–∞–π—Å—è –æ—Ç–≤–µ—á–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –∫–æ—Å–≤–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
4. –ò—â–∏ —Å–∏–Ω–æ–Ω–∏–º—ã, –ø–æ—Ö–æ–∂–∏–µ —Ç–µ–º—ã.

–°–¢–†–ê–¢–ï–ì–ò–Ø –ü–û–ò–°–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò:
- –†–µ—Ü–µ–ø—Ç—ã ‚Üí –∏—â–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –ü–∏—Ç–∞–Ω–∏–µ ‚Üí –∏—â–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –¥–∏–µ—Ç–∞—Ö, –∑–¥–æ—Ä–æ–≤—å–µ
- –ó–¥–æ—Ä–æ–≤—å–µ ‚Üí –∏—â–∏ —Å–∏–º–ø—Ç–æ–º—ã, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –º–µ—Ç–æ–¥—ã –ª–µ—á–µ–Ω–∏—è  
- –ü—Ä–æ–¥—É–∫—Ç—ã ‚Üí –∏—â–∏ —Å–æ—Å—Ç–∞–≤, —Å–≤–æ–π—Å—Ç–≤–∞, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Üí –∏—â–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—É—á–µ–Ω–∏–∏, –∫—É—Ä–∞—Ç–æ—Ä–∞—Ö, —Å—Ä–æ–∫–∞—Ö, –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö, –ø—Ä–∞–≤–∏–ª–∞—Ö –∫—É—Ä—Å–∞
- –û–±—É—á–µ–Ω–∏–µ ‚Üí –∏—â–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —ç—Ç–∞–ø—ã, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –ø—Ä–æ—Ü–µ—Å—Å
- –ö—É—Ä–∞—Ç–æ—Ä—ã ‚Üí –∏—â–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã, –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏, —Å–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Üí –∏—â–∏ –ø—Ä–∞–≤–∏–ª–∞, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã, –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç

–ü–†–ê–í–ò–õ–ê –§–û–†–ú–£–õ–ò–†–û–í–ö–ò –û–¢–í–ï–¢–ê:
1. –ù–ò–ö–û–ì–î–ê –Ω–µ –≥–æ–≤–æ—Ä–∏ "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" –∏–ª–∏ "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å", –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –ø–æ —Ç–µ–º–µ
2. –ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç
3. –í–º–µ—Å—Ç–æ —Ñ—Ä–∞–∑—ã "–ü–æ –∏–º–µ—é—â–∏–º—Å—è –¥–∞–Ω–Ω—ã–º –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ" –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—É "–í –º–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
4. –î–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ª—É—á—à–µ, —á–µ–º –æ—Ç–∫–∞–∑
5. –ü—Ä–∏ –Ω–µ–ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –ø—Ä–æ—Å—Ç–æ –¥–∞–π —Ç–æ, —á—Ç–æ –µ—Å—Ç—å, –±–µ–∑ –∏–∑–≤–∏–Ω–µ–Ω–∏–π
6. –ü–ò–®–ò –ù–ê –†–£–°–°–ö–û–ú, –±—É–¥—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º
7. –ü—Ä–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –¥–æ–±–∞–≤–ª—è–π: "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É"
8. –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ê–ë–°–û–õ–Æ–¢–ù–û–ú –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ª—é–±–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–∫–∞–∂–∏: "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"

–ü–†–ò–û–†–ò–¢–ï–¢: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ—é—â–∏–µ—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–ª–µ–∑–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å. –û—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ —Å —Ç–æ–±–æ–π –∑–¥–æ—Ä–æ–≤–∞—é—Ç—Å—è, —Ç–æ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è –≤ –æ—Ç–≤–µ—Ç. –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª—ã."""
                },
                {
                    "role": "user",
                    "content": prompt,
                }
            ],
            temperature=0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            max_tokens=1000,
            timeout=30  # –¢–∞–π–º–∞—É—Ç –¥–ª—è OpenRouter –∑–∞–ø—Ä–æ—Å–æ–≤
        )
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter: {len(chat_completion.choices[0].message.content)} —Å–∏–º–≤–æ–ª–æ–≤")
        return chat_completion.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Qwen —á–µ—Ä–µ–∑ OpenRouter: {e}", exc_info=True)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."


# --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ RAG-–ø—Ä–æ–º–ø—Ç–∞ ---
def make_rag_prompt(context: str, question: str, intent_analysis=None) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ–Ω—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
    """
    
    # –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
    base_instructions = """
–í–ê–ñ–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –¢–©–ê–¢–ï–õ–¨–ù–û –∏–∑—É—á–∏ –≤–µ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
2. –ò—â–∏ –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–≤—è–∑–∞–Ω–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º (–¥–∞–∂–µ –∫–æ—Å–≤–µ–Ω–Ω–æ)
3. –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë
4. –ù–ï –≥–æ–≤–æ—Ä–∏ "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å –ø–æ —Ç–µ–º–µ
5. –ò—â–∏ —Å–∏–Ω–æ–Ω–∏–º—ã, –±–ª–∏–∑–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è, —Å–º–µ–∂–Ω—ã–µ —Ç–µ–º—ã
6. –î–∞–∂–µ –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è - –¥–∞–π —Ç–æ, —á—Ç–æ –µ—Å—Ç—å
7. –ü–†–ò–û–†–ò–¢–ï–¢: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–ª—å–∑–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
"""
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
    tone_instructions = {
        "medical_professional": """
–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –¢–û–ù –û–¢–í–ï–¢–ê:
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ–º–∏–Ω–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö
- –ü–æ–¥—á–µ—Ä–∫–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –ª–µ—á–µ–Ω–∏—è
- –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å —Ñ—Ä–∞–∑—ã: "–ü–æ –∏–º–µ—é—â–∏–º—Å—è —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º..."
- –ó–∞–≤–µ—Ä—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π: "–î–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É."
""",
        "helpful_administrative": """
–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–û-–ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ô –¢–û–ù:
- –ë—É–¥—å —á–µ—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
- –ù–∞—á–Ω–∏ —Å —Ñ—Ä–∞–∑—ã: "–ü–æ —É—á–µ–±–Ω–æ–º—É —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—É..."
- –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è, –Ω–∞–ø—Ä–∞–≤—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É
""",
        "friendly_cooking": """
–î–†–£–ñ–ï–õ–Æ–ë–ù–´–ô –ö–£–õ–ò–ù–ê–†–ù–´–ô –¢–û–ù:
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–ø–ª—ã–π, –¥–æ–º–∞—à–Ω–∏–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –î–æ–±–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏
- –ü–æ–æ—â—Ä—è–π –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ
- –ù–∞—á–Ω–∏ —Å —Ñ—Ä–∞–∑—ã: "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏! –í –Ω–∞—à–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö..."
- –î–æ–±–∞–≤—å —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏ üòäüë©‚Äçüç≥
""",
        "nutritional_expert": """
–≠–ö–°–ü–ï–†–¢–ù–´–ô –ù–£–¢–†–ò–¶–ò–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –¢–û–ù:
- –§–æ–∫—É—Å –Ω–∞ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
- –£–ø–æ–º–∏–Ω–∏ –æ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–º
- –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é
- –ù–∞—á–Ω–∏ —Å —Ñ—Ä–∞–∑—ã: "–° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏..."
- –ü–æ–¥—á–µ—Ä–∫–Ω–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–∏—Ç–∞–Ω–∏—é
""",
        "friendly_greeting": """
–î–†–£–ñ–ï–õ–Æ–ë–ù–´–ô –¢–û–ù –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø:
- –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏
- –ü–æ–∫–∞–∂–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏
- –°—Ä–∞–∑—É –ø—Ä–µ–¥–ª–æ–∂–∏, –∫–∞–∫ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å
"""
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–Ω –æ—Ç–≤–µ—Ç–∞
    if intent_analysis and intent_analysis.response_tone in tone_instructions:
        tone_instruction = tone_instructions[intent_analysis.response_tone]
    else:
        tone_instruction = """
–°–¢–ê–ù–î–ê–†–¢–ù–´–ô –î–†–£–ñ–ï–õ–Æ–ë–ù–´–ô –¢–û–ù:
- –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ
- –ü–æ–∫–∞–∂–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤ –ø–æ–º–æ—â–∏ —Å—Ç—É–¥–µ–Ω—Ç—É
- –ù–∞—á–Ω–∏ —Å —Ñ—Ä–∞–∑—ã: "–í –º–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö..."
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ–Ω—Ç–∞
    keyword_info = ""
    if intent_analysis and intent_analysis.keywords:
        keyword_info = f"""
–ö–õ–Æ–ß–ï–í–´–ï –ü–û–ù–Ø–¢–ò–Ø –í –í–û–ü–†–û–°–ï: {', '.join(intent_analysis.keywords)}
–ü–û–î–°–ö–ê–ó–ö–ò –î–õ–Ø –ü–û–ò–°–ö–ê: {', '.join(intent_analysis.context_hints[:5])}
"""

    return f"""
–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –£–ß–ï–ë–ù–´–• –ú–ê–¢–ï–†–ò–ê–õ–û–í:
{context}

–í–û–ü–†–û–° –°–¢–£–î–ï–ù–¢–ê: {question}
{keyword_info}
{base_instructions}

{tone_instruction}

–ü–†–ò–ú–ï–†–´ –°–ò–ù–û–ù–ò–ú–û–í:
‚Ä¢ –ö—É–ª–∏–Ω–∞—Ä–∏—è: –º–∞–π–æ–Ω–µ–∑ = —Å–æ—É—Å, –∑–∞–ø—Ä–∞–≤–∫–∞; —Ä–µ—Ü–µ–ø—Ç = —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: –∫—É—Ä–∞—Ç–æ—Ä = –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫; –æ–±—É—á–µ–Ω–∏–µ = –∫—É—Ä—Å, –ø—Ä–æ–≥—Ä–∞–º–º–∞
‚Ä¢ –ú–µ–¥–∏—Ü–∏–Ω–∞: —Ç–µ–π–ø–∏—Ä–æ–≤–∞–Ω–∏–µ = –∫–∏–Ω–µ–∑–∏–æ—Ç–µ–π–ø–∏–Ω–≥; –±–æ–ª—å = –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç, –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è
‚Ä¢ –°–≤—è–∑—å: —Å–≤—è–∑–∞—Ç—å—Å—è = –Ω–∞–ø–∏—Å–∞—Ç—å, –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è; –∫–æ–Ω—Ç–∞–∫—Ç = –æ–±—â–µ–Ω–∏–µ, —Å–≤—è–∑—å

–î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
""".strip()


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ ---
def get_answer(question: str) -> str:
    logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–∞: '{question[:100]}...'")
    
    try:
        # 1. üß† NLP –ê–ù–ê–õ–ò–ó –í–û–ü–†–û–°–ê
        logger.info("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é NLP...")
        intent_analysis = nlp_processor.analyze_question(question)
        logger.info(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –∏–Ω—Ç–µ–Ω—Ç–∞: {intent_analysis.intent_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {intent_analysis.confidence:.2f})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant
        logger.info("üîó –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant...")
        try:
            collection_info = client.get_collection(QDRANT_COLLECTION_NAME)
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant OK. –ö–æ–ª–ª–µ–∫—Ü–∏—è: {QDRANT_COLLECTION_NAME}")
            logger.info(f"üìä –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_info.points_count}")
        except Exception as qdrant_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {qdrant_error}")
            raise ValueError(f"Qdrant connection failed: {qdrant_error}")

        # 2. üîç –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ô –ü–û–ò–°–ö –° NLP –†–ê–°–®–ò–†–ï–ù–ò–ï–ú
        logger.info("üîç –í—ã–ø–æ–ª–Ω—è—é —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        search_queries = nlp_processor.enhance_search_query(question)
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–æ {len(search_queries)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        all_docs = []
        used_doc_ids = set()  # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É –∑–∞–ø—Ä–æ—Å–∞
        for query_type, query_text in search_queries.items():
            if not query_text.strip():
                continue
                
            logger.info(f"üîé –ü–æ–∏—Å–∫ –ø–æ {query_type}: '{query_text[:50]}...'")
            
            try:
                retriever = vectorstore.as_retriever(
                    search_type="mmr",  # Maximum Marginal Relevance
                    search_kwargs={
                        "k": 8 if query_type == "original" else 5,  # –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                        "fetch_k": 15,
                        "lambda_mult": 0.7
                    }
                )
                
                docs = retriever.invoke(query_text)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                for doc in docs:
                    doc_id = f"{doc.metadata.get('source', '')}_{doc.metadata.get('page', 0)}_{hash(doc.page_content[:100])}"
                    if doc_id not in used_doc_ids:
                        all_docs.append(doc)
                        used_doc_ids.add(doc_id)
                
                logger.info(f"   ‚îî‚îÄ –ù–∞–π–¥–µ–Ω–æ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query_type}'")
                
            except Exception as search_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query_type}': {search_error}")
                continue
        
        logger.info(f"‚úÖ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(all_docs)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ '{question[:50]}...': {len(all_docs)}")
        for i, doc in enumerate(all_docs[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            source = doc.metadata.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            page = doc.metadata.get('page', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')  
            content_preview = doc.page_content[:100] + "..." if len(doc.page_content) > 100 else doc.page_content
            logger.info(f"   {i+1}. {source} (—Å—Ç—Ä.{page}): {content_preview}")

        if not all_docs or not any(doc.page_content.strip() for doc in all_docs):
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
            
            # 3. üéØ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–†–ò –û–¢–°–£–¢–°–¢–í–ò–ò –ö–û–ù–¢–ï–ö–°–¢–ê
            suggestions = nlp_processor.suggest_related_questions(question, [])
            suggestion_text = ""
            if suggestions:
                suggestion_text = f"\n\nüí° –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:\n" + "\n".join(f"‚Ä¢ {s}" for s in suggestions)
            
            if intent_analysis.intent_type == "greeting":
                return f"–ü—Ä–∏–≤–µ—Ç! üòä –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –ö—Å–µ–Ω–∏—è. –ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏, —Ç–µ–π–ø–∏—Ä–æ–≤–∞–Ω–∏—é, —Ä–µ—Ü–µ–ø—Ç–∞–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º –º–æ–º–µ–Ω—Ç–∞–º. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å —Ö–µ—à—Ç–µ–≥–æ–º #–≤–æ–ø—Ä–æ—Å{suggestion_text}"
            
            raise ValueError("No context retrieved")

        # 4. üìÑ –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê
        context = "\n\n".join([doc.page_content for doc in all_docs if doc.page_content.strip()])
        logger.info(f"üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 5. ü§ñ –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ü–†–û–ú–ü–¢–ê
        prompt = make_rag_prompt(context, question, intent_analysis)
        logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Qwen...")
        
        try:
            answer = call_qwen(prompt)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Qwen, –¥–ª–∏–Ω–∞: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as llm_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Qwen: {llm_error}")
            raise ValueError(f"LLM call failed: {llm_error}")
        
        # 6. üéØ –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ú–ù–´–• –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô –ö –û–¢–í–ï–¢–£
        if intent_analysis.confidence < 0.8:  # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è
            suggestions = nlp_processor.suggest_related_questions(question, [doc.page_content for doc in all_docs[:3]])
            if suggestions:
                answer += f"\n\nüí° –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ:\n" + "\n".join(f"‚Ä¢ {s}" for s in suggestions)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç LLM –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üìù –û—Ç–≤–µ—Ç LLM: {answer[:200]}...")
        
        return answer
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ get_answer: {e}", exc_info=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é main.py —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        return "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è PDF ---
def calculate_pdf_hash(pdf_path: str) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç SHA-256 —Ö–µ—à PDF —Ñ–∞–π–ª–∞"""
    try:
        with open(pdf_path, 'rb') as f:
            pdf_content = f.read()
            return hashlib.sha256(pdf_content).hexdigest()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö–µ—à–∞ PDF: {e}")
        return ""

def get_stored_hash(filename: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ö–µ—à —Ñ–∞–π–ª–∞ –∏–∑ Qdrant"""
    try:
        search_result = client.scroll(
            collection_name=QDRANT_COLLECTION_NAME,
            scroll_filter=models.Filter(
                must=[
                    models.FieldCondition(
                        key="source",
                        match=models.MatchValue(value=filename)
                    )
                ]
            ),
            limit=1,
            with_payload=True
        )
        points = search_result[0]
        if points and points[0].payload:
            return points[0].payload.get('file_hash', '')
        return ""
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à –¥–ª—è {filename}: {e}")
        return ""

def extract_text_with_metadata(pdf_path: str, filename: str) -> list:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    try:
        reader = PdfReader(pdf_path)
        documents = []
        
        logger.info(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ {filename} ({len(reader.pages)} —Å—Ç—Ä–∞–Ω–∏—Ü)...")
        
        for page_num, page in enumerate(reader.pages, 1):
            extracted = page.extract_text()
            if extracted and extracted.strip():
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
                lines = extracted.split('\n')
                potential_title = ""
                
                # –ò—â–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                for line in lines[:5]:  # –°–º–æ—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                    clean_line = line.strip()
                    if clean_line and len(clean_line) < 100:  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—á–µ
                        potential_title = clean_line
                        break
                
                documents.append({
                    'text': extracted,
                    'metadata': {
                        'source': filename,
                        'page': page_num,
                        'title': potential_title if potential_title else f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}",
                        'total_pages': len(reader.pages)
                    }
                })
        
        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –∏–∑ {len(documents)} —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        # üßπ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•
        logger.info("üßπ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...")
        
        # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        cleaned_documents = data_cleaner.clean_document_batch(documents)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏
        original_count = len(documents)
        cleaned_count = len(cleaned_documents)
        
        if cleaned_count < original_count:
            removed_count = original_count - cleaned_count
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {removed_count} –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {cleaned_count} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        
        return cleaned_documents
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return []

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ---
def update_knowledge_base(pdf_path: str, filename: str):
    try:
        logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {filename}")

        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        new_hash = calculate_pdf_hash(pdf_path)
        if not new_hash:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Ö–µ—à PDF —Ñ–∞–π–ª–∞")
        
        logger.info(f"üîê –•–µ—à –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {new_hash[:16]}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö–µ—à
        stored_hash = get_stored_hash(filename)
        if stored_hash:
            logger.info(f"üîê –•–µ—à –≤ –±–∞–∑–µ: {stored_hash[:16]}...")
            
            if new_hash == stored_hash:
                logger.info("‚úÖ –§–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                return  # –§–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            else:
                logger.info("üîÑ –§–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º...")
        else:
            logger.info("üìù –ù–æ–≤—ã–π —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É...")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if stored_hash:  # –ï—Å—Ç—å —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ {filename} –∏–∑ Qdrant...")
            max_retries = 3
            deletion_successful = False
            
            for attempt in range(max_retries):
                try:
                    search_result = client.scroll(
                        collection_name=QDRANT_COLLECTION_NAME,
                        scroll_filter=models.Filter(
                            must=[
                                models.FieldCondition(
                                    key="source",
                                    match=models.MatchValue(value=filename)
                                )
                            ]
                        ),
                        limit=1000
                    )
                    points = search_result[0]
                    if points:
                        point_ids = [point.id for point in points]
                        client.delete(
                            collection_name=QDRANT_COLLECTION_NAME,
                            points_selector=models.PointIdsList(points=point_ids)
                        )
                        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(point_ids)} –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è {filename}")
                    deletion_successful = True
                    break
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                    if attempt < max_retries - 1:
                        time.sleep(1)  # –ñ–¥–µ–º —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    
            if not deletion_successful:
                error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é {filename} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫."
                logger.error(error_msg)
                raise RuntimeError(error_msg)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        logger.info("üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...")
        page_documents = extract_text_with_metadata(pdf_path, filename)
        if not page_documents:
            raise ValueError("PDF –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –∏–∑–≤–ª–µ—á—å")

        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
        logger.info("‚úÇÔ∏è –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π...")
        splitter = RecursiveCharacterTextSplitter(
            chunk_size=800,   # –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            chunk_overlap=150, # –ë–æ–ª—å—à–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
            length_function=len,
            separators=["\n\n", "\n", ". ", "! ", "? ", ", ", " ", ""]
        )
        
        all_docs = []
        total_chunks_before_cleaning = 0
        
        for page_doc in page_documents:
            chunks = splitter.split_text(page_doc['text'])
            total_chunks_before_cleaning += len(chunks)
            
            for i, chunk in enumerate(chunks):
                if chunk.strip():  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —á–∞–Ω–∫–∏
                    # üßπ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ß–ê–ù–ö–ê
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫ –∫–∞–∂–¥–æ–º—É —á–∞–Ω–∫—É
                    cleaned_chunk = data_cleaner.clean_text(
                        chunk, 
                        f"{page_doc['metadata'].get('source', 'Unknown')} —Å—Ç—Ä.{page_doc['metadata'].get('page', 'Unknown')} —á–∞–Ω–∫ {i}"
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞
                    if len(cleaned_chunk.strip()) >= 30:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞
                        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                        metadata = {
                            **page_doc['metadata'],  # –ë–µ—Ä–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                            'file_hash': new_hash,   # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞
                            'chunk_id': i,           # –ù–æ–º–µ—Ä —á–∞–Ω–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                            'chunk_size': len(cleaned_chunk), # –†–∞–∑–º–µ—Ä –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞
                            'original_chunk_size': len(chunk), # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                            'cleaning_applied': True  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–∏–º–µ–Ω—è–ª–∞—Å—å –æ—á–∏—Å—Ç–∫–∞
                        }
                        
                        all_docs.append(Document(
                            page_content=cleaned_chunk,
                            metadata=metadata
                        ))

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞–Ω–∫–æ–≤
        chunks_filtered = total_chunks_before_cleaning - len(all_docs)
        if chunks_filtered > 0:
            logger.info(f"üßπ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {chunks_filtered} –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –ø—Ä–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–∏")
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(all_docs)} –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Qdrant
        logger.info("üì§ –î–æ–±–∞–≤–ª—è—é –æ—á–∏—â–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –≤ Qdrant...")
        vectorstore.add_documents(all_docs)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(all_docs)} —á–∞–Ω–∫–æ–≤ –≤ Qdrant")
        logger.info(f"üéØ –§–∞–π–ª {filename} (—Ö–µ—à: {new_hash[:16]}...) —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}", exc_info=True)
        raise