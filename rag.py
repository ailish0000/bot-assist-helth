from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import Qdrant
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_core.documents import Document
from PyPDF2 import PdfReader
import hashlib
from openai import OpenAI
import logging
import os
import time
from qdrant_client import QdrantClient
from qdrant_client.http import models

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Qdrant ---
QDRANT_URL = os.getenv("QDRANT_URL")
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
QDRANT_COLLECTION_NAME = os.getenv("QDRANT_COLLECTION_NAME", "nutri-bot")

if not QDRANT_URL or not QDRANT_API_KEY:
    logger.error("‚ùó –ù–µ –∑–∞–¥–∞–Ω—ã QDRANT_URL –∏–ª–∏ QDRANT_API_KEY")
    raise ValueError("Qdrant: URL –∏ API-–∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenRouter (Qwen) ---
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
if not OPENROUTER_API_KEY:
    logger.error("‚ùó –ù–µ –∑–∞–¥–∞–Ω OPENROUTER_API_KEY")
    raise ValueError("OpenRouter: API-–∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è OpenRouter
from openai import OpenAI
openrouter_client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

# --- –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ ---
embeddings = HuggingFaceEmbeddings(model_name=os.getenv("EMBEDDING_MODEL", "sentence-transformers/all-MiniLM-L6-v2"))

# --- –ö–ª–∏–µ–Ω—Ç Qdrant ---
client = QdrantClient(
    url=QDRANT_URL,
    api_key=QDRANT_API_KEY,
    timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è Railway
)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ---
try:
    client.get_collection(QDRANT_COLLECTION_NAME)
    logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{QDRANT_COLLECTION_NAME}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
except Exception as e:
    logger.info(f"üõ†Ô∏è –°–æ–∑–¥–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é '{QDRANT_COLLECTION_NAME}'...")
    client.create_collection(
        collection_name=QDRANT_COLLECTION_NAME,
        vectors_config=models.VectorParams(
            size=384,
            distance=models.Distance.COSINE
        )
    )
    logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{QDRANT_COLLECTION_NAME}' —Å–æ–∑–¥–∞–Ω–∞")

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ –ø–æ–ª—é "source" ---
try:
    info = client.get_collection(QDRANT_COLLECTION_NAME)
    payload_schema = info.payload_schema
    if "source" not in payload_schema:
        logger.info("üõ†Ô∏è –°–æ–∑–¥–∞—é –∏–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—é 'source'...")
        client.create_payload_index(
            collection_name=QDRANT_COLLECTION_NAME,
            field_name="source",
            field_schema=models.PayloadSchemaType.KEYWORD
        )
        logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—é 'source' —Å–æ–∑–¥–∞–Ω")
    else:
        logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—é 'source' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")

# --- –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ---
vectorstore = Qdrant(
    client=client,
    collection_name=QDRANT_COLLECTION_NAME,
    embeddings=embeddings
)


# --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ ---
def check_services_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Qdrant –∏ OpenRouter –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant
    try:
        logger.info("üîó –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant...")
        collection_info = client.get_collection(QDRANT_COLLECTION_NAME)
        logger.info(f"‚úÖ Qdrant OK - –ö–æ–ª–ª–µ–∫—Ü–∏—è: {QDRANT_COLLECTION_NAME}, –í–µ–∫—Ç–æ—Ä–æ–≤: {collection_info.points_count}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {e}")
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ QDRANT_URL –∏ QDRANT_API_KEY")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenRouter
    try:
        logger.info("ü§ñ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter...")
        test_response = openrouter_client.chat.completions.create(
            model="qwen/qwen-2.5-coder-32b-instruct",
            messages=[{"role": "user", "content": "Test"}],
            max_tokens=5,
            timeout=10
        )
        logger.info("‚úÖ OpenRouter OK - API –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter: {e}")
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OPENROUTER_API_KEY")
        return False
    
    logger.info("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã!")
    return True


# --- –§—É–Ω–∫—Ü–∏—è: –≤—ã–∑–æ–≤ Qwen —á–µ—Ä–µ–∑ OpenRouter ---
def call_qwen(prompt: str) -> str:
    logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Qwen —á–µ—Ä–µ–∑ OpenRouter...")
    try:
        chat_completion = openrouter_client.chat.completions.create(
            model="qwen/qwen-2.5-coder-32b-instruct",
            messages=[
                {
                    "role": "system",
                    "content": """–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –ö—Å–µ–Ω–∏—è –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π Telegram-–≥—Ä—É–ø–ø–µ –ø–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –¢—ã –≤—Å–µ–≥–¥–∞ —Å —Ä–∞–¥–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –í–°–ï–ì–î–ê –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–Æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
2. –ï—Å–ª–∏ –µ—Å—Ç—å –õ–Æ–ë–ê–Ø —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–¥–∞–∂–µ –∫–æ—Å–≤–µ–Ω–Ω–∞—è) ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç
3. –ù–ò–ö–û–ì–î–ê –Ω–µ –≥–æ–≤–æ—Ä–∏ "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –ø–æ —Ç–µ–º–µ
4. –î–∞–∂–µ –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
5. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø–ª–æ—Ö—É—é —Ñ—Ä–∞–∑—É "–ü–æ –∏–º–µ—é—â–∏–º—Å—è –¥–∞–Ω–Ω—ã–º –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê:
1. –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
2. –ü—Ä–∏ –Ω–µ–ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: "–í –º–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö..." + —Ç–æ —á—Ç–æ –∑–Ω–∞–µ—à—å
3. –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ü–û–õ–ù–û–ú –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –õ–Æ–ë–û–ô —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–∫–∞–∂–∏: "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"
4. –ü—Ä–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö –¥–æ–±–∞–≤–ª—è–π: "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É"
5. –ü–ò–®–ò –ù–ê –†–£–°–°–ö–û–ú, –±—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º
6. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–º–æ—â–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, —Ç–æ –¥–æ–±–∞–≤–ª—è–π: "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É"
7. –ü–†–ò–û–†–ò–¢–ï–¢: –î–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
                },
                {
                    "role": "user",
                    "content": prompt,
                }
            ],
            temperature=0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            max_tokens=1000,
            timeout=30  # –¢–∞–π–º–∞—É—Ç –¥–ª—è OpenRouter –∑–∞–ø—Ä–æ—Å–æ–≤
        )
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter: {len(chat_completion.choices[0].message.content)} —Å–∏–º–≤–æ–ª–æ–≤")
        return chat_completion.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Qwen —á–µ—Ä–µ–∑ OpenRouter: {e}", exc_info=True)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."


# --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ RAG-–ø—Ä–æ–º–ø—Ç–∞ ---
def make_rag_prompt(context: str, question: str) -> str:
    return f"""
–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –£–ß–ï–ë–ù–´–• –ú–ê–¢–ï–†–ò–ê–õ–û–í:
{context}

–í–û–ü–†–û–° –°–¢–£–î–ï–ù–¢–ê: {question}

–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–Æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –µ—Å—Ç—å –õ–Æ–ë–ê–Ø —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∞—è) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –¥–ª—è –ø–æ–ª–µ–∑–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ù–ï –≥–æ–≤–æ—Ä–∏ "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –ø–æ —Ç–µ–º–µ. –ü–æ–º–æ–≥–∏ —Å—Ç—É–¥–µ–Ω—Ç—É –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
""".strip()


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ ---
def get_answer(question: str) -> str:
    logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–∞: '{question[:100]}...'")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant
        logger.info("üîó –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant...")
        try:
            collection_info = client.get_collection(QDRANT_COLLECTION_NAME)
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant OK. –ö–æ–ª–ª–µ–∫—Ü–∏—è: {QDRANT_COLLECTION_NAME}")
            logger.info(f"üìä –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_info.points_count}")
        except Exception as qdrant_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {qdrant_error}")
            raise ValueError(f"Qdrant connection failed: {qdrant_error}")

        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å MMR –¥–ª—è –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ...")
        retriever = vectorstore.as_retriever(
            search_type="mmr",  # Maximum Marginal Relevance - —Å–Ω–∏–∂–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            search_kwargs={
                "k": 7,           # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                "fetch_k": 15,    # –ë–æ–ª—å—à–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
                "lambda_mult": 0.7 # –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é (1.0) –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º (0.0)
            }
        )
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ—Ä—Ç–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            docs = retriever.invoke(question)
            logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(docs)}")
        except Exception as search_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ: {search_error}")
            # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
            if "timeout" in str(search_error).lower():
                logger.error("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞")
            elif "connection" in str(search_error).lower():
                logger.error("üîó –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Qdrant")
            raise ValueError(f"Vector search failed: {search_error}")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ '{question[:50]}...': {len(docs)}")
        for i, doc in enumerate(docs):
            source = doc.metadata.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            page = doc.metadata.get('page', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')  
            content_preview = doc.page_content[:100] + "..." if len(doc.page_content) > 100 else doc.page_content
            logger.info(f"   {i+1}. {source} (—Å—Ç—Ä.{page}): {content_preview}")

        if not docs or not any(doc.page_content.strip() for doc in docs):
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            raise ValueError("No context retrieved")

        context = "\n\n".join([doc.page_content for doc in docs if doc.page_content.strip()])
        logger.info(f"üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        prompt = make_rag_prompt(context, question)
        logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Qwen...")
        
        try:
            answer = call_qwen(prompt)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Qwen, –¥–ª–∏–Ω–∞: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as llm_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Qwen: {llm_error}")
            raise ValueError(f"LLM call failed: {llm_error}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç LLM –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üìù –û—Ç–≤–µ—Ç LLM: {answer[:200]}...")
        
        return answer
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ get_answer: {e}", exc_info=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é main.py —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        return "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è PDF ---
def calculate_pdf_hash(pdf_path: str) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç SHA-256 —Ö–µ—à PDF —Ñ–∞–π–ª–∞"""
    try:
        with open(pdf_path, 'rb') as f:
            pdf_content = f.read()
            return hashlib.sha256(pdf_content).hexdigest()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö–µ—à–∞ PDF: {e}")
        return ""

def get_stored_hash(filename: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ö–µ—à —Ñ–∞–π–ª–∞ –∏–∑ Qdrant"""
    try:
        search_result = client.scroll(
            collection_name=QDRANT_COLLECTION_NAME,
            scroll_filter=models.Filter(
                must=[
                    models.FieldCondition(
                        key="source",
                        match=models.MatchValue(value=filename)
                    )
                ]
            ),
            limit=1,
            with_payload=True
        )
        points = search_result[0]
        if points and points[0].payload:
            return points[0].payload.get('file_hash', '')
        return ""
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à –¥–ª—è {filename}: {e}")
        return ""

def extract_text_with_metadata(pdf_path: str, filename: str) -> list:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    try:
        reader = PdfReader(pdf_path)
        documents = []
        
        for page_num, page in enumerate(reader.pages, 1):
            extracted = page.extract_text()
            if extracted and extracted.strip():
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
                lines = extracted.split('\n')
                potential_title = ""
                
                # –ò—â–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                for line in lines[:5]:  # –°–º–æ—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                    clean_line = line.strip()
                    if clean_line and len(clean_line) < 100:  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—á–µ
                        potential_title = clean_line
                        break
                
                documents.append({
                    'text': extracted,
                    'metadata': {
                        'source': filename,
                        'page': page_num,
                        'title': potential_title if potential_title else f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}",
                        'total_pages': len(reader.pages)
                    }
                })
        
        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç –∏–∑ {len(documents)} —Å—Ç—Ä–∞–Ω–∏—Ü")
        return documents
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: {e}")
        return []

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ---
def update_knowledge_base(pdf_path: str, filename: str):
    try:
        logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {filename}")

        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        new_hash = calculate_pdf_hash(pdf_path)
        if not new_hash:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Ö–µ—à PDF —Ñ–∞–π–ª–∞")
        
        logger.info(f"üîê –•–µ—à –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {new_hash[:16]}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö–µ—à
        stored_hash = get_stored_hash(filename)
        if stored_hash:
            logger.info(f"üîê –•–µ—à –≤ –±–∞–∑–µ: {stored_hash[:16]}...")
            
            if new_hash == stored_hash:
                logger.info("‚úÖ –§–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                return  # –§–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            else:
                logger.info("üîÑ –§–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º...")
        else:
            logger.info("üìù –ù–æ–≤—ã–π —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É...")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if stored_hash:  # –ï—Å—Ç—å —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ {filename} –∏–∑ Qdrant...")
            max_retries = 3
            deletion_successful = False
            
            for attempt in range(max_retries):
                try:
                    search_result = client.scroll(
                        collection_name=QDRANT_COLLECTION_NAME,
                        scroll_filter=models.Filter(
                            must=[
                                models.FieldCondition(
                                    key="source",
                                    match=models.MatchValue(value=filename)
                                )
                            ]
                        ),
                        limit=1000
                    )
                    points = search_result[0]
                    if points:
                        point_ids = [point.id for point in points]
                        client.delete(
                            collection_name=QDRANT_COLLECTION_NAME,
                            points_selector=models.PointIdsList(points=point_ids)
                        )
                        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(point_ids)} –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è {filename}")
                    deletion_successful = True
                    break
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                    if attempt < max_retries - 1:
                        time.sleep(1)  # –ñ–¥–µ–º —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    
            if not deletion_successful:
                error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é {filename} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫."
                logger.error(error_msg)
                raise RuntimeError(error_msg)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        logger.info("üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...")
        page_documents = extract_text_with_metadata(pdf_path, filename)
        if not page_documents:
            raise ValueError("PDF –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –∏–∑–≤–ª–µ—á—å")

        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏
        logger.info("‚úÇÔ∏è –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏...")
        splitter = RecursiveCharacterTextSplitter(
            chunk_size=512,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
            chunk_overlap=100,  # –ë–æ–ª—å—à–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            length_function=len,
            separators=["\n\n", "\n", ". ", "! ", "? ", ", ", " ", ""]
        )
        
        all_docs = []
        for page_doc in page_documents:
            chunks = splitter.split_text(page_doc['text'])
            
            for i, chunk in enumerate(chunks):
                if chunk.strip():  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —á–∞–Ω–∫–∏
                    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    metadata = {
                        **page_doc['metadata'],  # –ë–µ—Ä–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        'file_hash': new_hash,   # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞
                        'chunk_id': i,           # –ù–æ–º–µ—Ä —á–∞–Ω–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                        'chunk_size': len(chunk) # –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
                    }
                    
                    all_docs.append(Document(
                        page_content=chunk,
                        metadata=metadata
                    ))

        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(all_docs)} —á–∞–Ω–∫–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Qdrant
        logger.info("üì§ –î–æ–±–∞–≤–ª—è—é –≤–µ–∫—Ç–æ—Ä—ã –≤ Qdrant...")
        vectorstore.add_documents(all_docs)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(all_docs)} —á–∞–Ω–∫–æ–≤ –≤ Qdrant")
        logger.info(f"üéØ –§–∞–π–ª {filename} (—Ö–µ—à: {new_hash[:16]}...) —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}", exc_info=True)
        raise