from langchain_pinecone import PineconeVectorStore
from langchain_huggingface import HuggingFaceEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from PyPDF2 import PdfReader
import dashscope  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Qwen
import logging
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á Qwen
dashscope.api_key = os.getenv("QWEN_API_KEY")

# –≠–º–±–µ–¥–¥–∏–Ω–≥–∏
embeddings = HuggingFaceEmbeddings(model_name=os.getenv("EMBEDDING_MODEL", "sentence-transformers/all-MiniLM-L6-v2"))

# –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞
vectorstore = PineconeVectorStore(
    index_name=os.getenv("PINECONE_INDEX_NAME", "nutri-knowledge"),
    embedding=embeddings
)

# --- –§—É–Ω–∫—Ü–∏—è: –≤—ã–∑–æ–≤ Qwen ---
def call_qwen(prompt: str) -> str:
    try:
        response = dashscope.Generation.call(
            model="qwen-max",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ qwen-turbo
            prompt=prompt,
            max_tokens=512,
            temperature=0.5
        )
        if response.status_code == 200:
            return response.output["text"].strip()
        else:
            logger.error(f"Qwen API error {response.status_code}: {response.message}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Qwen: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

# --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ RAG-–ø—Ä–æ–º–ø—Ç–∞ ---
def make_rag_prompt(context: str, question: str) -> str:
    return f"""
–í—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞. –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ, –≤–µ–∂–ª–∏–≤–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —Å–∫–∞–∂–∏—Ç–µ: "–Ø –∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ö—É—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω."

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

–í–æ–ø—Ä–æ—Å: {question}

–û—Ç–≤–µ—Ç:
""".strip()

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ ---
def get_answer(question: str) -> str:
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏
        retriever = vectorstore.as_retriever(search_kwargs={"k": 3})
        docs = retriever.invoke(question)
        
        if not docs or not any(doc.page_content.strip() for doc in docs):
            raise ValueError("No context retrieved")

        context = "\n\n".join([doc.page_content for doc in docs if doc.page_content.strip()])
        prompt = make_rag_prompt(context, question)
        answer = call_qwen(prompt)
        return answer
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ---
def update_knowledge_base(pdf_path: str, filename: str):
    try:
        logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {filename}")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ {filename}...")
        vectorstore.delete(filter={"source": filename})
        logger.info("‚úÖ –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")

        # –ß–∏—Ç–∞–µ–º PDF
        reader = PdfReader(pdf_path)
        text = ""
        for i, page in enumerate(reader.pages):
            extracted = page.extract_text()
            if extracted:
                text += extracted + "\n"
            else:
                logger.warning(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} ‚Äî —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á—ë–Ω")

        if not text.strip():
            raise ValueError("PDF –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")

        logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á—ë–Ω. –î–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
        logger.info("‚úÇÔ∏è –†–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞–Ω–∫–∏...")
        splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
        chunks = splitter.split_text(text)
        logger.info(f"‚úÖ –†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        docs = [
            {"page_content": chunk, "metadata": {"source": filename}}
            for chunk in chunks
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Pinecone
        logger.info("üì§ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–µ–∫—Ç–æ—Ä—ã –≤ Pinecone...")
        vectorstore.add_documents(docs)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –≤ Pinecone")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}", exc_info=True)
        raise
