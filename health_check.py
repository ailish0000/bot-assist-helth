#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –±–æ—Ç–∞
"""
import os
import sys
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = [
        'TELEGRAM_BOT_TOKEN',
        'OPENROUTER_API_KEY', 
        'QDRANT_URL',
        'QDRANT_API_KEY'
    ]
    
    optional_vars = [
        'QDRANT_COLLECTION_NAME',
        'ADMIN_UPLOAD_IDS',
        'EMBEDDING_MODEL'
    ]
    
    missing_vars = []
    present_vars = []
    
    for var in required_vars:
        if os.getenv(var):
            # –ú–∞—Å–∫–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            value = os.getenv(var)
            masked = value[:8] + "..." + value[-4:] if len(value) > 12 else "***"
            present_vars.append(f"{var}: {masked}")
        else:
            missing_vars.append(var)
    
    for var in optional_vars:
        if os.getenv(var):
            value = os.getenv(var)
            # –î–ª—è –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if var in ['QDRANT_COLLECTION_NAME', 'EMBEDDING_MODEL']:
                present_vars.append(f"{var}: {value}")
            else:
                masked = value[:8] + "..." if len(value) > 8 else value
                present_vars.append(f"{var}: {masked}")
    
    logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    for var in present_vars:
        logger.info(f"   {var}")
    
    if missing_vars:
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        for var in missing_vars:
            logger.error(f"   {var}")
        return False
    
    logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True

def check_telegram_bot():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram Bot API"""
    logger.info("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot...")
    
    try:
        from aiogram import Bot
        from config import TELEGRAM_BOT_TOKEN
        
        if not TELEGRAM_BOT_TOKEN:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
            return False
        
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        import asyncio
        async def test_bot():
            try:
                me = await bot.get_me()
                logger.info(f"‚úÖ Telegram Bot OK: @{me.username} ({me.first_name})")
                await bot.session.close()
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram Bot: {e}")
                return False
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(test_bot())
        loop.close()
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram: {e}")
        return False

def check_qdrant():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant"""
    logger.info("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant...")
    
    try:
        from qdrant_client import QdrantClient
        
        QDRANT_URL = os.getenv("QDRANT_URL")
        QDRANT_API_KEY = os.getenv("QDRANT_API_KEY") 
        QDRANT_COLLECTION_NAME = os.getenv("QDRANT_COLLECTION_NAME", "nutri-bot")
        
        if not QDRANT_URL or not QDRANT_API_KEY:
            logger.error("‚ùå QDRANT_URL –∏–ª–∏ QDRANT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã")
            return False
        
        client = QdrantClient(
            url=QDRANT_URL,
            api_key=QDRANT_API_KEY,
            timeout=10
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        collections = client.get_collections()
        logger.info(f"‚úÖ Qdrant –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK. –ö–æ–ª–ª–µ–∫—Ü–∏–π: {len(collections.collections)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é
        try:
            collection_info = client.get_collection(QDRANT_COLLECTION_NAME)
            logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{QDRANT_COLLECTION_NAME}' –Ω–∞–π–¥–µ–Ω–∞. –í–µ–∫—Ç–æ—Ä–æ–≤: {collection_info.points_count}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è '{QDRANT_COLLECTION_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {e}")
        return False

def check_openrouter():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter"""
    logger.info("üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenRouter...")
    
    try:
        from openai import OpenAI
        
        OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
        if not OPENROUTER_API_KEY:
            logger.error("‚ùå OPENROUTER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
            return False
        
        client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=OPENROUTER_API_KEY,
        )
        
        # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        response = client.chat.completions.create(
            model="qwen/qwen-2.5-coder-32b-instruct",
            messages=[{"role": "user", "content": "–°–∫–∞–∂–∏ '—Ç–µ—Å—Ç'"}],
            max_tokens=5,
            timeout=10
        )
        
        logger.info("‚úÖ OpenRouter API OK")
        logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {response.choices[0].message.content}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter: {e}")
        return False

def check_embeddings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    logger.info("üî§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    
    try:
        from langchain_huggingface import HuggingFaceEmbeddings
        
        model_name = os.getenv("EMBEDDING_MODEL", "sentence-transformers/all-MiniLM-L6-v2")
        logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å: {model_name}")
        
        embeddings = HuggingFaceEmbeddings(model_name=model_name)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
        test_text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"
        test_embedding = embeddings.embed_query(test_text)
        
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ OK. –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(test_embedding)}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
    logger.info(f"üïê –í—Ä–µ–º—è: {datetime.now().isoformat()}")
    logger.info(f"üêç Python: {sys.version}")
    logger.info("=" * 60)
    
    checks = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment_variables),
        ("Telegram Bot", check_telegram_bot),
        ("Qdrant", check_qdrant),
        ("OpenRouter", check_openrouter),
        ("–≠–º–±–µ–¥–¥–∏–Ω–≥–∏", check_embeddings)
    ]
    
    results = {}
    for name, check_func in checks:
        logger.info(f"\nüîç {name}...")
        try:
            results[name] = check_func()
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {name}: {e}")
            results[name] = False
    
    logger.info("\n" + "=" * 60)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    
    all_ok = True
    for name, status in results.items():
        icon = "‚úÖ" if status else "‚ùå"
        logger.info(f"{icon} {name}: {'OK' if status else 'FAILED'}")
        if not status:
            all_ok = False
    
    if all_ok:
        logger.info("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        logger.error("\nüí• –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")
        return 1

if __name__ == "__main__":
    sys.exit(main())