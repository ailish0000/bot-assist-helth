"""
üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è NLP —É–ª—É—á—à–µ–Ω–∏–π –±–æ—Ç–∞
"""

from nlp_processor_lite import NLPProcessor

def demo_nlp_improvements():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    
    print("üß† –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø NLP –£–õ–£–ß–®–ï–ù–ò–ô –ë–û–¢–ê")
    print("=" * 60)
    
    nlp = NLPProcessor()
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    demo_questions = [
        ("—É –º–µ–Ω—è –±–æ–ª–∏—Ç —Å–ø–∏–Ω–∞, —Ç–µ–π–ø—ã –ø–æ–º–æ–≥—É—Ç?", "medical_question"),
        ("—Å–ø–∏–Ω–∞ –Ω–æ–µ—Ç, –ø–æ–º–æ–∂–µ—Ç –ª–∏ –∫–∏–Ω–µ–∑–∏–æ—Ç–µ–π–ø?", "medical_question"),
        ("–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —ç–∫–∑–∞–º–µ–Ω?", "organizational_question"),
        ("–∫–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º?", "organizational_question"),
        ("—Ä–µ—Ü–µ–ø—Ç –ø–æ–ª–µ–∑–Ω–æ–≥–æ —Å–∞–ª–∞—Ç–∞", "recipe_question"),
        ("–ø–æ–ª–µ–∑–Ω–∞ –ª–∏ –∫–∏–Ω–æ–∞?", "product_question"),
        ("–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", "greeting")
    ]
    
    for i, (question, expected_type) in enumerate(demo_questions, 1):
        print(f"\n{i}. –°–¢–£–î–ï–ù–¢ –°–ü–†–ê–®–ò–í–ê–ï–¢: '{question}'")
        print("-" * 50)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        analysis = nlp.analyze_question(question)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        print(f"üéØ –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {analysis.intent_type}")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence:.2f}")
        print(f"üîë –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {', '.join(analysis.keywords[:5])}")
        print(f"üó£Ô∏è –¢–æ–Ω –æ—Ç–≤–µ—Ç–∞: {analysis.response_tone}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        search_variants = nlp.enhance_search_query(question)
        print(f"üîç –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: {search_variants['original']}")
        print(f"üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {search_variants['expanded'][:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if analysis.intent_type == expected_type:
            print("‚úÖ –ò–Ω—Ç–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ü–†–ê–í–ò–õ–¨–ù–û")
        else:
            print(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {analysis.intent_type}")

def demo_synonym_expansion():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤"""
    
    print(f"\n\nüîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–°–®–ò–†–ï–ù–ò–Ø –°–ò–ù–û–ù–ò–ú–û–í")
    print("=" * 60)
    
    nlp = NLPProcessor()
    
    test_cases = [
        "–±–æ–ª—å –≤ –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–µ",
        "–∫—É—Ä–∞—Ç–æ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç", 
        "—Ä–µ—Ü–µ–ø—Ç –º–∞–π–æ–Ω–µ–∑–∞",
        "—Ç–µ–π–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ?"
    ]
    
    for question in test_cases:
        print(f"\nüìù –ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å: '{question}'")
        
        variants = nlp.enhance_search_query(question)
        
        print(f"üîç –ü–æ–∏—Å–∫ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {variants['keywords_only']}")
        print(f"üîç –ü–æ–∏—Å–∫ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏: {variants['context_hints']}")
        print(f"üîç –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {variants['combined'][:100]}...")

if __name__ == "__main__":
    try:
        demo_nlp_improvements()
        demo_synonym_expansion()
        
        print(f"\n\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"\nüìà –ö–õ–Æ–ß–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
        print("‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        print("‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
        print("‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏")
        print("‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞")
        print("‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª nlp_processor_lite.py —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
